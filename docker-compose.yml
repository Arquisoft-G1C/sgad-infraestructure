# SGAD Infrastructure - Microservices Complete Architecture
version: '3.8'

networks:
  sgad-network:
    driver: bridge

volumes:
  postgres_users_data:
  postgres_referee_data:
  postgres_match_data:
  mongo_certificados_data:
  redis_data:
  rabbitmq_data:

services:
  # ============================================
  # DATABASES LAYER
  # ============================================
  
  # PostgreSQL - users_db (Auth Service)
  postgres-users:
    image: postgres:15
    container_name: sgad-users-db
    environment:
      POSTGRES_DB: ${USERS_DB:-users_db}
      POSTGRES_USER: ${USERS_DB_USER:-sgad_user}
      POSTGRES_PASSWORD: ${USERS_DB_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_users_data:/var/lib/postgresql/data
      - ./db/postgres/init-users.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - sgad-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${USERS_DB_USER:-sgad_user} -d ${USERS_DB:-users_db}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL - referee_db (Referee & Availability Services)
  postgres-referee:
    image: postgres:15
    container_name: sgad-referee-db
    environment:
      POSTGRES_DB: ${REFEREE_DB:-referee_db}
      POSTGRES_USER: ${REFEREE_DB_USER:-sgad_user}
      POSTGRES_PASSWORD: ${REFEREE_DB_PASSWORD}
    ports:
      - "5433:5432"
    volumes:
      - postgres_referee_data:/var/lib/postgresql/data
      - ./db/postgres/init-referee.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - sgad-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${REFEREE_DB_USER:-sgad_user} -d ${REFEREE_DB:-referee_db}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL - match_db (Match Management Service)
  postgres-match:
    image: postgres:15
    container_name: sgad-match-db
    environment:
      POSTGRES_DB: ${MATCH_DB:-match_db}
      POSTGRES_USER: ${MATCH_DB_USER:-sgad_user}
      POSTGRES_PASSWORD: ${MATCH_DB_PASSWORD}
    ports:
      - "5434:5432"
    volumes:
      - postgres_match_data:/var/lib/postgresql/data
      - ./db/postgres/init-match.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - sgad-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${MATCH_DB_USER:-sgad_user} -d ${MATCH_DB:-match_db}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB - certificados_db (Referee Management - Certificates & Documents)
  mongodb-certificados:
    image: mongo:7
    container_name: sgad-certificados-db
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${CERTIFICADOS_DB_USER:-sgad_mongo}
      MONGO_INITDB_ROOT_PASSWORD: ${CERTIFICADOS_DB_PASSWORD}
      MONGO_INITDB_DATABASE: ${CERTIFICADOS_DB:-certificados_db}
    ports:
      - "27017:27017"
    volumes:
      - mongo_certificados_data:/data/db
      - ./db/mongo/init-certificados.js:/docker-entrypoint-initdb.d/init.js
    networks:
      - sgad-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis - Cache, queues and pub/sub
  redis:
    image: redis:7-alpine
    container_name: sgad-redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - sgad-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # RabbitMQ - Message Broker for async communication
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: sgad-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-sgad_rabbit}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_VHOST:-sgad_vhost}
    ports:
      - "5672:5672"   # AMQP protocol
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - sgad-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================
  # BACKEND SERVICES LAYER
  # ============================================
  
  # Auth Service - Node.js + JWT (uses users_db)
  auth-service:
    image: sgad-auth-service:latest
    container_name: sgad-auth-service
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3001
      POSTGRES_HOST: postgres-users
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${USERS_DB:-users_db}
      POSTGRES_USER: ${USERS_DB_USER:-sgad_user}
      POSTGRES_PASSWORD: ${USERS_DB_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION: ${JWT_EXPIRATION:-24h}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    ports:
      - "3001:3001"
    depends_on:
      postgres-users:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - sgad-network
    restart: unless-stopped

  # Referee Management Service - Python + FastAPI (uses referee_db + certificados_db)
  referee-service:
    image: sgad-referee-service:latest
    container_name: sgad-referee-service
    environment:
      ENVIRONMENT: ${ENVIRONMENT:-production}
      DATABASE_URL: postgresql://${REFEREE_DB_USER:-sgad_user}:${REFEREE_DB_PASSWORD}@postgres-referee:5432/${REFEREE_DB:-referee_db}
      MONGODB_URL: mongodb://${CERTIFICADOS_DB_USER:-sgad_mongo}:${CERTIFICADOS_DB_PASSWORD}@mongodb-certificados:27017/${CERTIFICADOS_DB:-certificados_db}?authSource=admin
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    ports:
      - "3004:3004"
    depends_on:
      postgres-referee:
        condition: service_healthy
      mongodb-certificados:
        condition: service_healthy
    networks:
      - sgad-network
    restart: unless-stopped

  # Availability Service - Python + FastAPI (uses referee_db)
  availability-service:
    image: sgad-availability-service:latest
    container_name: sgad-availability-service
    environment:
      ENVIRONMENT: ${ENVIRONMENT:-production}
      DATABASE_URL: postgresql://${REFEREE_DB_USER:-sgad_user}:${REFEREE_DB_PASSWORD}@postgres-referee:5432/${REFEREE_DB:-referee_db}
      JWT_SECRET: ${JWT_SECRET}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: ${RABBITMQ_USER:-sgad_rabbit}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      RABBITMQ_VHOST: ${RABBITMQ_VHOST:-sgad_vhost}
    ports:
      - "8000:8000"
    depends_on:
      postgres-referee:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - sgad-network
    restart: unless-stopped

  # Match Management Service - Python + FastAPI (uses match_db)
  match-service:
    image: sgad-match-service:latest
    container_name: sgad-match-service
    environment:
      ENVIRONMENT: ${ENVIRONMENT:-production}
      DATABASE_URL: postgresql://${MATCH_DB_USER:-sgad_user}:${MATCH_DB_PASSWORD}@postgres-match:5432/${MATCH_DB:-match_db}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    ports:
      - "8001:8000"
    depends_on:
      postgres-match:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - sgad-network
    restart: unless-stopped

  # ============================================
  # API GATEWAY LAYER
  # ============================================
  
  # API Gateway - Spring Boot (Java)
  api-gateway:
    image: sgad-api-gateway:latest
    container_name: sgad-api-gateway
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILE:-production}
      AUTH_SERVICE_URL: http://auth-service:3001
      REFEREE_SERVICE_URL: http://referee-service:3004
      AVAILABILITY_SERVICE_URL: http://availability-service:8000
      MATCH_SERVICE_URL: http://match-service:8000
      JWT_SECRET: ${JWT_SECRET}
    ports:
      - "8080:8080"
    depends_on:
      - auth-service
      - referee-service
      - availability-service
      - match-service
    networks:
      - sgad-network
    restart: unless-stopped

  # ============================================
  # FRONTEND LAYER
  # ============================================
  
  # Web Frontend - Next.js (React + TypeScript)
  frontend:
    image: sgad-frontend:latest
    container_name: sgad-frontend
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      # Client-side API URLs (accessed from browser)
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:8080}
      NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL:-ws://localhost:8080}
      # Server-side API URLs (accessed from Next.js server inside container)
      API_URL: http://api-gateway:8080
      AUTH_SERVICE_URL: http://api-gateway:8080
      MATCH_SERVICE_URL: http://api-gateway:8080
      REFEREE_SERVICE_URL: http://api-gateway:8080
      AVAILABILITY_SERVICE_URL: http://api-gateway:8080
    ports:
      - "3000:3000"
    depends_on:
      - api-gateway
    networks:
      - sgad-network
    restart: unless-stopped
